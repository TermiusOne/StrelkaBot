import logging
import requests

from telegram import ParseMode
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram.ext import Filters
from telegram.ext import MessageHandler
from telegram.ext import CallbackQueryHandler
from telegram.ext.dispatcher import run_async

from strelkabot.utils import TelegramBotPlugin


class Balance(TelegramBotPlugin):

    def __init__(self, telegram_bot):
        super().__init__(telegram_bot)

        self.tg.dispatcher.add_handler(MessageHandler(
            Filters.regex("–£–ó–ù–ê–¢–¨ –ë–ê–õ–ê–ù–° üí∞"), self._msg_balance
        ))

        self.tg.dispatcher.add_handler(CallbackQueryHandler(
            self._cbk_balance, pattern="b-"
        ))

    @run_async
    @TelegramBotPlugin.send_typing
    def _msg_balance(self, update, context):
        cards = self.tg.db.select_user_cards(update.message.from_user)

        if cards is None:
            msg = "‚Äº –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            update.message.reply_text(msg)

        elif len(cards) > 0:
            keyboard = list()

            for card in cards:
                callback = "b-{}".format(card)
                keyboard.append([InlineKeyboardButton(text=card,
                                                      callback_data=callback)])

            keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                                  callback_data="ex")])

            msg = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É, –±–∞–ª–∞–Ω—Å –∫–æ—Ç–æ—Ä–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: "
            markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text(msg, reply_markup=markup)

        else:
            msg = "–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç."
            update.message.reply_text(msg)

    @run_async
    def _cbk_balance(self, update, context):
        query = update.callback_query
        data = self.tg.db.select_user_balance(query.message.chat.id,
                                              query.data[2::])

        if data is None or len(data) == 0:
            msg = self._request(query.data[2::])
            query.edit_message_text(text=msg, parse_mode=ParseMode.MARKDOWN)

        else:
            txt = "–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã _‚Ññ{}_\n—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {} —Ä—É–±."
            msg = txt.format(data[0][2][-4::], data[0][3] / 100)
            query.edit_message_text(text=msg, parse_mode=ParseMode.MARKDOWN)

    def _request(self, card):
        # region strelkakard params
        url = "https://strelkacard.ru/api/cards/status/"
        payload = {
            "cardnum": card,
            "cardtypeid": "3ae427a1-0f17-4524-acb1-a3f50090a8f3"}
        headers = {
            "accept": "application/json, text/plain, */*",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
            "referer": "https://strelkacard.ru/",
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5)",
            "x-csrftoken": "null",
            "x-requested-with": "XMLHttpRequest"
        }
        # endregion
        try:
            r = requests.get(url, params=payload, headers=headers)
            balance = r.json()["balance"]

            txt = "–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã _‚Ññ{}_\n—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {} —Ä—É–±."
            msg = txt.format(card[-4::], balance / 100)

            return msg

        except Exception as ex:
            logging.warning("balance Error: '{}'".format(ex))
            msg = "‚Äº –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            return msg
