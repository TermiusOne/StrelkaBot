import requests

from telegram import ParseMode
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram.ext import ConversationHandler
from telegram.ext import CallbackQueryHandler
from telegram.ext import MessageHandler
from telegram.ext import Filters

from telegrambot import TelegramBotPlugin


class Newcard(TelegramBotPlugin):

    START = 1

    def __init__(self, telegram_bot):
        self.tgb = telegram_bot
        self.tgb.dispatcher.add_handler(ConversationHandler(
                entry_points=[
                    MessageHandler(Filters.regex(
                        "–î–û–ë–ê–í–ò–¢–¨ –ö–ê–†–¢–£ üÜï"), self._start
                    )
                ],
                states={
                    self.START: [
                        MessageHandler(Filters.text, self._input),
                        ]
                },
                fallbacks=[
                    CallbackQueryHandler(self._escape, pattern="cancel")
                ]
            )
        )

    @TelegramBotPlugin.send_typing
    @TelegramBotPlugin.add_user
    def _start(self, update, context):
        text = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤."
        keyboard = [
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel")]
        ]
        menu_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(text, reply_markup=menu_markup)
        return self.START

    @TelegramBotPlugin.send_typing
    def _input(self, update, context):
        t_id = update.message.from_user.id
        card = update.message.text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä.
        if card.isdigit() is False:
            text = "*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!*"
            keyboard = [
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel")]
            ]
            menu_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text(
                text, reply_markup=menu_markup, parse_mode=ParseMode.MARKDOWN
            )
            return self.START

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç—ã –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö.
        elif card in self.tgb.data_base.get_user_strelka(t_id):
            text = "–î–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –í–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É."
            update.message.reply_text(text)
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ —Å–∞–π—Ç.
        elif self._check_card(card) is True:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–∞ 'cards_strelka'.
            if self.tgb.data_base.check_strelka(card) is False:
                self.tgb.data_base.add_strelka(card)
                self.tgb.data_base.add_user_strelka(t_id, card)
                if self.tgb.data_base.chek_user_strelka(t_id, card) is True:
                    update.message.reply_text("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
                    return ConversationHandler.END
                else:
                    update.message.reply_text("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ :—Å.")
                    return ConversationHandler.END
            else:
                self.tgb.data_base.add_user_strelka(t_id, card)
                if self.tgb.data_base.chek_user_strelka(t_id, card) is True:
                    update.message.reply_text("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
                    return ConversationHandler.END
                else:
                    update.message.reply_text("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ :—Å.")
                    return ConversationHandler.END

        else:
            update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return ConversationHandler.END

    def _escape(self, update, context):
        query = update.callback_query
        text = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.'
        context.bot.edit_message_text(
            text=text,
            chat_id=query.message.chat_id,
            message_id=query.message.message_id
        )
        return ConversationHandler.END

    def _check_card(self, card):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ —Å–∞–π—Ç, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
        try:
            CARD_TYPE_ID = '3ae427a1-0f17-4524-acb1-a3f50090a8f3'
            payload = {'cardnum': card, 'cardtypeid': CARD_TYPE_ID}
            r = requests.get('http://strelkacard.ru/api/cards/status/',
                             params=payload)
            if r.status_code != 200:
                return r.reason
        except Exception as error:
            return error
        return True
